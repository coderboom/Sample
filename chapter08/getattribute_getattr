"""
__getattribute__ vs __getattr__ 浅谈
"""

#
# class User(object):
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def __getattr__(self, item):  # getattr会在没有查找到相应实例属性时被调用
#         return "not found " + item
#
#     def __getattribute__(self, item):
#         return "abcd " + item
#

# u = User('chenhao', 18)
# print(u.name)
#
# class AboutAttr(object):
#     def __init__(self, name):
#         self.name = name
#
#     def __getattribute__(self, item):
#         try:
#             return super(AboutAttr, self).__getattribute__(item)
#         except KeyError:
#             return 'default'
#         except AttributeError as ex:
#             print(ex)
#
#     def __getattr__(self, item):
#         return 'default'
#
#
# at = AboutAttr('test')
# print(at.name)
#
# print(at.not_exised)
"""
----------------------------------------------------------------
"""
# class Animal(object):
#     run = True
#
#
# class Dog(Animal):
#     fly = False
#
#     def __init__(self, age):
#         self.age = age
#
#     def __getattribute__(self, key):
#         # 重写__getattribute__。需要注意的是重写的方法中不能
#         # 使用对象的点运算符访问属性，否则使用点运算符访问属性时，
#         # 会再次调用__getattribute__。这样就会陷入无限递归。
#         # 可以使用super()方法避免这个问题。
#         print("calling __getattribute__\n")
#         return super(Dog, self).__getattribute__(key)
#
#     def sound(self):
#         return "wang wang~"
#
#
# dog = Dog(1)
# print(dog.age)
# print('__________________')
# print(dog.fly)
# print('--------------')
# print(dog.run)
# print('--------------')
# print(dog.sound())
"""
----------------------------------------------------------------
"""


class Animal(object):
    run = True


class Dog(Animal):
    fly = False

    def __init__(self, age):
        self.age = age

    def __getattr__(self, name):
        print("calling __getattr__\n")
        if name == 'adult':
            return True if self.age >= 2 else False
        else:
            raise AttributeError

    """
    实例对象的__setattr__方法可以定义属性的赋值行为，不管属性是否存在。
    当属性存在时，它会改变其值；当属性不存在时，它会添加一个对象属性信息到对象的__dict__中，
    然而这并不改变类的属性。 
    """

    def __setattr__(self, name, value):
        print("calling __setattr__")
        super(Dog, self).__setattr__(name, value)

    def __delattr__(self, name):
        print("calling __delattr__")
        super(Dog, self).__delattr__(name)


"""
__getattr__
"""
dog = Dog(1)
print(dog.__dict__)
print(Dog.__dict__)
# 获取dog的age属性
print(dog.age)
print('------------------------')
# 获取dog的adult属性。
# 由于__getattribute__没有找到相应的属性，所以调用__getattr__
print(dog.adult)
print('------------------------')
# 调用一个不存在的属性name，__getattr__捕获AttributeError错误
# print(dog.name)
"""
__setattr__
"""
dog.age = 2
print(dog.age)
print('------------------------')
